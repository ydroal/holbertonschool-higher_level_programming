>>> matrix_divided = __import__("2-matrix_divided").matrix_divided

# test matrix with valid inputs
>>> matrix = [
...		[1, 2, 3],
...		[4, 5, 6]
...	]

>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# test division by 0
>>> matrix = [
...		[1, 2, 3],
...		[4, 5, 6]
...	]

>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero

# test div is str
>>> matrix = [
...		[1, 2, 3],
...		[4, 5, 6]
...	]

>>> matrix_divided(matrix, '3')
Traceback (most recent call last):
TypeError: div must be a number

# test matrix with different row lengths
>>> matrix = [
...		[1, 2, 3],
...		[4, 5, 6, 7]
...	]

>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

# test matrix with not number elements
>>> matrix = [
...		[1, 2, 3],
...		[4, 5, '6']
...	]

>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix(list of lists) of integers/floats

# test matrix is not a list of lists
>>> matrix = [
...		[1, 2, 3],
...		1
...	]

>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix(list of lists) of integers/floats

# test division with NaN_1
>>> matrix = [
...		[float('nan'), 2, 3],
...		[4, 5, 6]
...	]

>>> matrix_divided(matrix, 3)
[[nan, 0.67, 1.0], [1.33, 1.67, 2.0]]

# test division with NaN_2
>>> matrix = [
...		[1, 2, 3],
...		[4, 5, 6]
...	]

>>> matrix_divided(matrix, float('nan'))
[[nan, nan, nan], [nan, nan, nan]]

# test division with overflow
>>> matrix = [
...		[1.8e+308, 2, 3],
...		[4, 5, 6]
...	]

>>> matrix_divided(matrix, 3)
[[inf, 0.67, 1.0], [1.33, 1.67, 2.0]]


