>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

# create new_class
>>> bg = BaseGeometry()

# Test the method area()
>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

# Test the method integer_validator() with int
>>> bg.integer_validator("my_int", 12)


# Test the method integer_validator() with str (TypeError)
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
TypeError: name must be an integer

# Test the method integer_validator() with 0 (ValueError)
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
ValueError: age must be greater than 0

# Test the method integer_validator() with -4 (ValueError)
>>> bg.integer_validator("age", -4)
Traceback (most recent call last):
ValueError: age must be greater than 0

# Test the method integer_validator() without arg: value
>>> bg.integer_validator('age')
Traceback (most recent call last):
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

# Test the method integer_validator() no args
>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

# Test the method integer_validator() with tuple
>>> bg.integer_validator('age', (4.))
Traceback (most recent call last):
TypeError: age must be an integer

# Test the method integer_validator() with list
>>> bg.integer_validator('age', [3])
Traceback (most recent call last):
TypeError: age must be an integer

# Test the method integer_validator() with boolean
>>> bg.integer_validator('age', True)
Traceback (most recent call last):
TypeError: age must be an integer

# Test the method integer_validator() with set
>>> bg.integer_validator('age', {3, 4})
Traceback (most recent call last):
TypeError: age must be an integer

# Test the method integer_validator() with None
>>> bg.integer_validator('age', None)
Traceback (most recent call last):
TypeError: age must be an integer







